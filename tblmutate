#!/usr/bin/perl
# tblfilter: filter CSV row through generalized conditions
# Copyright(c) 2009 EURAC, Institute of Genetic Medicine
#use strict;
#use warnings;
use locale;
use Getopt::Std;

my %flags;
getopts("e:l:", \%flags);
my $SEP = ($ENV{'TBLSEP'} || "\t");
my ($file) = @ARGV;
if(!$file || !defined($flags{'e'}))
{
  print(STDERR qq{$0 -e expression file:
Filter the rows of the specified CSV file through an arbitrary Perl expression.
CSV files are TAB separated, containing column labels on the first row.
You can change the column separator by setting the TBLSEP environment variable.
Just the lines for which the expression returns non-zero are returned.
You can refer to \$N[x] for column positions or \$L\{name\} for column labels
relative to the current row. For example:

  -e '\$N[1] > 1':	returns all the lines for which the first column is > 1
  -e '\$L\{test\} > 1':	returns all the lines for which the column 'test' is > 1
});
  exit(2);
}


# open the file and read columns
open(FD, $file) or die("cannot open $file\n");
$_ = <FD>;
s/[\r\n]+$//;

# header
print("$_\t$flags{'l'}\n");

# header convert ".", "-" to "_"
s/(\.|-)/_/g;

my @head = split($SEP, $_, -1);
map { s/\s+/_/g } @head;
my @cols = split($SEP, $_, -1);



# remap
while(<FD>)
{
  s/[\r\n]+$//;
  my @data = split($SEP, $_, -1);

  die("line error at $file:$.:$#data") if($#data != $#{cols});
	
  my @cols = split($SEP, $_, -1);
  map { $str='${ $head[$_] } = $cols[$_]'; eval($str) } 0..$#cols;

  # build an hash that can be used in the expression
  my $r = 0;
  {
    my %L;
    my @N;
    foreach my $n(0 ... $#cols)
    {
      $N[$n + 1] = $data[$n];
      $L{$cols[$n]} = $data[$n];
    }

    $r = eval($flags{'e'});

	
  }
  
  if($r){
  	print(join($SEP, @data,$r) . "\n");
  }
}

close(FD);

# tblmutate -e '$A=~/\d+.GT(\d)/; $N1=$1; $B=~/\d+.GT(\d)/; $N2=$1; "sum : $N1 - $N2" ' -l "C" Final.Concordance.summary.txt   | lesss

