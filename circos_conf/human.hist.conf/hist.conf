
<plot>
type = histogram


# histogram.0.txt, histogram.1.txt, histogram.2.txt, ...
file = heatmap.counter(plot).txt

# 0.925, 0.925-0.06, 0.0925-2*0.06, ...
#r0      = eval(sprintf("%fr",conf(track_start) - counter(plot) * conf(track_step) ))
r0      = eval( sprintf( "%fr",conf(track_start) - (counter(plot) + 1) * conf(track_width) - counter(plot) * conf(track_step) ) )


# 0.925+0.055, 0.925+0.55-0.06, 0.0925+0.55-2*0.06, ...
#r1      = eval(sprintf("%fr",conf(track_start) + conf(track_width) - counter(plot) * conf(track_step)))
r1      = eval( sprintf( "%fr",conf(track_start) - counter(plot) * conf(track_width) - counter(plot) * conf(track_step) ) )

# in, out, in, out, ...
# orientation = eval( counter(plot) % 2 ? "in" : "out" )

# spectral-11-div-1, spectral-11-div-2, spectral-11-div-3, ...
# fill_color  = eval(sprintf("spectral-11-div-%d",counter(plot)%11+1))
# fill_color  = eval(sprintf("hs%d",counter(histogram)+1))
fill_color  = vlgrey

extend_bin = no

# 8, 8, 7, 7, 6, 6, ...
# thickness   = eval(max(1,8-int(counter(thickness))))
# 0, 0.5, 1, 1.5, ...
# post_increment_counter = thickness:0.5
# vvvlgrey, vvlgrey, vlgrey, ...
# background_color = eval((qw(vvvlgrey vvlgrey vlgrey lgrey grey dgrey vdgrey vvdgrey))[counter(plot) % 8])



# <<include backgrounds.conf>>

# <rules>
# <rule>
# condition  = var(value) > 0.25 && var(value) < 0.75
# show = no
# </rule>
# </rules>

<rules>
<rule>
condition = var(value) >= 200
fill_color = "yellow"
#flow = 
</rule>

<rule>
condition = var(value) < 5 
fill_color = "dred"
</rule>

<rule>
condition = var(value) < 20 
fill_color = "orange"
</rule>


<rule>
condition = var(value) < 50 
fill_color = "grey"
</rule>

<rule>
condition = var(value) < 100
fill_color = "lblue"
</rule>

<rule>
condition = var(value) < 200
fill_color = "dblue"
</rule>

</rules>


</plot>




